
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00000b44  00000bd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800218  00800218  00000bf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036ef  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000152c  00000000  00000000  00004527  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a2  00000000  00000000  00005a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  00006df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fba  00000000  00000000  00007304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001715  00000000  00000000  000082be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000099d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	73 c3       	rjmp	.+1766   	; 0x6ec <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	24 c5       	rjmp	.+2632   	; 0xada <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e4       	ldi	r30, 0x44	; 68
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 35       	cpi	r26, 0x5D	; 93
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	0f c5       	rjmp	.+2590   	; 0xb40 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
static radiopacket_t packet;

int main()
{
	uint8_t i;
	clock8MHz();
 124:	f8 94       	cli
 126:	e1 e6       	ldi	r30, 0x61	; 97
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	80 83       	st	Z, r24
 12e:	10 82       	st	Z, r1
 130:	78 94       	sei

	cli();
 132:	f8 94       	cli

	// LEDs
	DDRL = 0xFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	PORTL = 0xFF;
 13a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>

	Roomba_Init(); // initialize the roomba
 13e:	7f d3       	rcall	.+1790   	; 0x83e <Roomba_Init>

	Radio_Init();
 140:	97 d1       	rcall	.+814    	; 0x470 <Radio_Init>
 142:	63 e0       	ldi	r22, 0x03	; 3
	Radio_Configure(RADIO_2MBPS, RADIO_HIGHEST_POWER);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	54 d2       	rcall	.+1192   	; 0x5f0 <Radio_Configure>
 148:	41 e0       	ldi	r20, 0x01	; 1
	Radio_Configure_Rx(RADIO_PIPE_0, roomba_addr, ENABLE); // setting the receving address
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	72 e0       	ldi	r23, 0x02	; 2
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	a7 d1       	rcall	.+846    	; 0x4a0 <Radio_Configure_Rx>
 152:	78 94       	sei

	sei();
 154:	60 e0       	ldi	r22, 0x00	; 0

	// UART test - drive straight forward at 100 mm/s for 0.5 second
	Roomba_Drive(100, 0x8000);
 156:	70 e8       	ldi	r23, 0x80	; 128
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	4c d4       	rcall	.+2200   	; 0x9f6 <Roomba_Drive>
 15e:	2f e9       	ldi	r18, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	86 e8       	ldi	r24, 0x86	; 134
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x40>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x4a>
 16e:	00 00       	nop

	_delay_ms(500);

	Roomba_Drive(0, 0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	3e d4       	rcall	.+2172   	; 0x9f6 <Roomba_Drive>
 17a:	0f 2e       	mov	r0, r31
				PORTL ^= _BV(PL4);
			}
		}
		else {
			// stand by
			PORTL ^= _BV(PL0);
 17c:	fb e0       	ldi	r31, 0x0B	; 11
 17e:	ef 2e       	mov	r14, r31
 180:	ff 24       	eor	r15, r15
 182:	f3 94       	inc	r15
 184:	f0 2d       	mov	r31, r0
 186:	d1 e0       	ldi	r29, 0x01	; 1
 188:	08 e1       	ldi	r16, 0x18	; 24
		{
			_delay_ms(20);

			// Copy the received packet into the radio packet structure.  If there are no more packets,
			// then clear the rxflag so that the interrupt will set it next time a packet is received.
			if (Radio_Receive(&packet) != RADIO_RX_MORE_PACKETS)
 18a:	12 e0       	ldi	r17, 0x02	; 2
 18c:	68 94       	set
				_delay_ms(10);
				PORTL ^= _BV(PL4);
			}
			else
			{
				PORTL ^= _BV(PL5);	// flash if the packet was received correctly
 18e:	cc 24       	eor	r12, r12
 190:	c5 f8       	bld	r12, 5
 192:	68 94       	set
				_delay_ms(10);
				PORTL ^= _BV(PL4);
 194:	dd 24       	eor	r13, r13
 196:	d4 f8       	bld	r13, 4
 198:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <rxflag>
	Roomba_Drive(0, 0);
	

	for (;;)
	{
		if (rxflag)
 19c:	88 23       	and	r24, r24
 19e:	09 f4       	brne	.+2      	; 0x1a2 <main+0x7e>
 1a0:	60 c0       	rjmp	.+192    	; 0x262 <main+0x13e>
 1a2:	e7 e8       	ldi	r30, 0x87	; 135
 1a4:	f3 e1       	ldi	r31, 0x13	; 19
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x82>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x88>
 1ac:	00 00       	nop
		{
			_delay_ms(20);

			// Copy the received packet into the radio packet structure.  If there are no more packets,
			// then clear the rxflag so that the interrupt will set it next time a packet is received.
			if (Radio_Receive(&packet) != RADIO_RX_MORE_PACKETS)
 1ae:	c8 01       	movw	r24, r16
 1b0:	6f d2       	rcall	.+1246   	; 0x690 <Radio_Receive>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	11 f0       	breq	.+4      	; 0x1ba <main+0x96>
 1b6:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <rxflag>
			{
				rxflag = 0;
 1ba:	f8 01       	movw	r30, r16
			}

			// If the packet is not a command, blink an error and don't do anything.
			if (packet.type != COMMAND)
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	29 f0       	breq	.+10     	; 0x1cc <main+0xa8>
 1c2:	f7 01       	movw	r30, r14
			{
				PORTL ^= _BV(PL7);
 1c4:	80 81       	ld	r24, Z
 1c6:	80 58       	subi	r24, 0x80	; 128
 1c8:	80 83       	st	Z, r24
 1ca:	e6 cf       	rjmp	.-52     	; 0x198 <main+0x74>
				continue;
 1cc:	f8 01       	movw	r30, r16
			}

			if (packet.payload.command.command == START ||
 1ce:	80 85       	ldd	r24, Z+8	; 0x08
 1d0:	90 e8       	ldi	r25, 0x80	; 128
 1d2:	98 0f       	add	r25, r24
 1d4:	95 30       	cpi	r25, 0x05	; 5
 1d6:	00 f3       	brcs	.-64     	; 0x198 <main+0x74>
					packet.payload.command.command == BAUD ||
					packet.payload.command.command == CONTROL ||
					packet.payload.command.command == SAFE ||
					packet.payload.command.command == FULL ||
 1d8:	8e 38       	cpi	r24, 0x8E	; 142
 1da:	f1 f2       	breq	.-68     	; 0x198 <main+0x74>
				// Don't pass the listed commands to the Roomba.
				continue;
			}

			// Output the command to the Roomba, followed by its arguments.
			uart_putchar(packet.payload.command.command);
 1dc:	23 d4       	rcall	.+2118   	; 0xa24 <uart_putchar>
 1de:	f8 01       	movw	r30, r16
			for (i = 0; i < packet.payload.command.num_arg_bytes; i++)
 1e0:	81 85       	ldd	r24, Z+9	; 0x09
 1e2:	88 23       	and	r24, r24
 1e4:	61 f0       	breq	.+24     	; 0x1fe <main+0xda>
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
			{
				uart_putchar(packet.payload.command.arguments[i]);
 1e8:	ec 2f       	mov	r30, r28
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e8 5e       	subi	r30, 0xE8	; 232
 1ee:	fd 4f       	sbci	r31, 0xFD	; 253
 1f0:	82 85       	ldd	r24, Z+10	; 0x0a
 1f2:	18 d4       	rcall	.+2096   	; 0xa24 <uart_putchar>
				continue;
			}

			// Output the command to the Roomba, followed by its arguments.
			uart_putchar(packet.payload.command.command);
			for (i = 0; i < packet.payload.command.num_arg_bytes; i++)
 1f4:	cf 5f       	subi	r28, 0xFF	; 255
 1f6:	f8 01       	movw	r30, r16
 1f8:	81 85       	ldd	r24, Z+9	; 0x09
 1fa:	c8 17       	cp	r28, r24
			{
				uart_putchar(packet.payload.command.arguments[i]);
			}

			// Set the radio's destination address to be the remote station's address
			Radio_Set_Tx_Addr(packet.payload.command.sender_address);
 1fc:	a8 f3       	brcs	.-22     	; 0x1e8 <main+0xc4>
 1fe:	8b e1       	ldi	r24, 0x1B	; 27
 200:	92 e0       	ldi	r25, 0x02	; 2

			// Update the Roomba sensors into the packet structure that will be transmitted.
			Roomba_UpdateSensorPacket(1, &packet.payload.sensors.sensors);
 202:	dd d1       	rcall	.+954    	; 0x5be <Radio_Set_Tx_Addr>
 204:	6b e1       	ldi	r22, 0x1B	; 27
 206:	72 e0       	ldi	r23, 0x02	; 2
 208:	8d 2f       	mov	r24, r29
			Roomba_UpdateSensorPacket(2, &packet.payload.sensors.sensors);
 20a:	6c d3       	rcall	.+1752   	; 0x8e4 <Roomba_UpdateSensorPacket>
 20c:	6b e1       	ldi	r22, 0x1B	; 27
 20e:	72 e0       	ldi	r23, 0x02	; 2
 210:	82 e0       	ldi	r24, 0x02	; 2
			Roomba_UpdateSensorPacket(3, &packet.payload.sensors.sensors);
 212:	68 d3       	rcall	.+1744   	; 0x8e4 <Roomba_UpdateSensorPacket>
 214:	6b e1       	ldi	r22, 0x1B	; 27
 216:	72 e0       	ldi	r23, 0x02	; 2
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	64 d3       	rcall	.+1736   	; 0x8e4 <Roomba_UpdateSensorPacket>

			// send the sensor packet back to the remote station.
			packet.type = SENSOR_DATA;
 21c:	f8 01       	movw	r30, r16
 21e:	d0 83       	st	Z, r29

			if (Radio_Transmit(&packet, RADIO_WAIT_FOR_TX) == RADIO_TX_MAX_RT)
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	c8 01       	movw	r24, r16
 224:	10 d2       	rcall	.+1056   	; 0x646 <Radio_Transmit>
 226:	81 11       	cpse	r24, r1
 228:	0e c0       	rjmp	.+28     	; 0x246 <main+0x122>
 22a:	f7 01       	movw	r30, r14
			{
				PORTL ^= _BV(PL4);	// flash if the packet was dropped
 22c:	80 81       	ld	r24, Z
 22e:	8d 25       	eor	r24, r13
 230:	80 83       	st	Z, r24
 232:	83 ec       	ldi	r24, 0xC3	; 195
 234:	99 e0       	ldi	r25, 0x09	; 9
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x112>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x118>
 23c:	00 00       	nop
 23e:	80 81       	ld	r24, Z
				_delay_ms(10);
				PORTL ^= _BV(PL4);
 240:	8d 25       	eor	r24, r13
 242:	80 83       	st	Z, r24
 244:	a9 cf       	rjmp	.-174    	; 0x198 <main+0x74>
 246:	f7 01       	movw	r30, r14
			}
			else
			{
				PORTL ^= _BV(PL5);	// flash if the packet was received correctly
 248:	80 81       	ld	r24, Z
 24a:	8c 25       	eor	r24, r12
 24c:	80 83       	st	Z, r24
 24e:	83 ec       	ldi	r24, 0xC3	; 195
 250:	99 e0       	ldi	r25, 0x09	; 9
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x12e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x134>
 258:	00 00       	nop
 25a:	80 81       	ld	r24, Z
				_delay_ms(10);
				PORTL ^= _BV(PL4);
 25c:	8d 25       	eor	r24, r13
 25e:	80 83       	st	Z, r24
 260:	9b cf       	rjmp	.-202    	; 0x198 <main+0x74>
 262:	f7 01       	movw	r30, r14
			}
		}
		else {
			// stand by
			PORTL ^= _BV(PL0);
 264:	80 81       	ld	r24, Z
 266:	8d 27       	eor	r24, r29
 268:	80 83       	st	Z, r24
 26a:	83 ec       	ldi	r24, 0xC3	; 195
 26c:	99 e0       	ldi	r25, 0x09	; 9
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x14a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x150>
 274:	00 00       	nop
 276:	90 cf       	rjmp	.-224    	; 0x198 <main+0x74>

00000278 <radio_rxhandler>:
 278:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
}

void radio_rxhandler(uint8_t pipenumber)
{
	rxflag = 1;
 27a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <rxflag>
	PORTL ^= _BV(PL7);
 27e:	eb e0       	ldi	r30, 0x0B	; 11
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	80 81       	ld	r24, Z
 284:	80 58       	subi	r24, 0x80	; 128
 286:	80 83       	st	Z, r24
 288:	83 ed       	ldi	r24, 0xD3	; 211
 28a:	90 e3       	ldi	r25, 0x30	; 48
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <radio_rxhandler+0x14>
 290:	00 c0       	rjmp	.+0      	; 0x292 <radio_rxhandler+0x1a>
 292:	00 00       	nop
	_delay_ms(50);
	PORTL ^= _BV(PL7);
 294:	80 81       	ld	r24, Z
 296:	80 58       	subi	r24, 0x80	; 128
 298:	80 83       	st	Z, r24
 29a:	08 95       	ret

0000029c <_get_status>:
	}

	wh = (16 - weight) * 100;
	wh /= 16;
	return wh;
}
 29c:	2d 98       	cbi	0x05, 5	; 5
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	c8 d2       	rcall	.+1424   	; 0x832 <SPI_Write_Byte>
 2a2:	2d 9a       	sbi	0x05, 5	; 5
 2a4:	08 95       	ret

000002a6 <_set_register>:
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	8b 01       	movw	r16, r22
 2b0:	d4 2f       	mov	r29, r20
 2b2:	2d 98       	cbi	0x05, 5	; 5
 2b4:	8f 71       	andi	r24, 0x1F	; 31
 2b6:	80 62       	ori	r24, 0x20	; 32
 2b8:	bc d2       	rcall	.+1400   	; 0x832 <SPI_Write_Byte>
 2ba:	c8 2f       	mov	r28, r24
 2bc:	6d 2f       	mov	r22, r29
 2be:	c8 01       	movw	r24, r16
 2c0:	a5 d2       	rcall	.+1354   	; 0x80c <SPI_Write_Block>
 2c2:	2d 9a       	sbi	0x05, 5	; 5
 2c4:	8c 2f       	mov	r24, r28
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

000002d0 <_get_register>:
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	eb 01       	movw	r28, r22
 2da:	14 2f       	mov	r17, r20
 2dc:	44 23       	and	r20, r20
 2de:	69 f0       	breq	.+26     	; 0x2fa <_get_register+0x2a>
 2e0:	fb 01       	movw	r30, r22
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	24 0f       	add	r18, r20
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
 2ea:	3f 4f       	sbci	r19, 0xFF	; 255
 2ec:	26 0f       	add	r18, r22
 2ee:	37 1f       	adc	r19, r23
 2f0:	9f ef       	ldi	r25, 0xFF	; 255
 2f2:	91 93       	st	Z+, r25
 2f4:	e2 17       	cp	r30, r18
 2f6:	f3 07       	cpc	r31, r19
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <_get_register+0x22>
 2fa:	2d 98       	cbi	0x05, 5	; 5
 2fc:	8f 71       	andi	r24, 0x1F	; 31
 2fe:	99 d2       	rcall	.+1330   	; 0x832 <SPI_Write_Byte>
 300:	08 2f       	mov	r16, r24
 302:	41 2f       	mov	r20, r17
 304:	be 01       	movw	r22, r28
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	69 d2       	rcall	.+1234   	; 0x7de <SPI_ReadWrite_Block>
 30c:	2d 9a       	sbi	0x05, 5	; 5
 30e:	80 2f       	mov	r24, r16
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <send_instruction>:
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	7b 01       	movw	r14, r22
 326:	8a 01       	movw	r16, r20
 328:	c2 2f       	mov	r28, r18
 32a:	2d 98       	cbi	0x05, 5	; 5
 32c:	82 d2       	rcall	.+1284   	; 0x832 <SPI_Write_Byte>
 32e:	cc 23       	and	r28, r28
 330:	59 f0       	breq	.+22     	; 0x348 <send_instruction+0x2e>
 332:	01 15       	cp	r16, r1
 334:	11 05       	cpc	r17, r1
 336:	21 f4       	brne	.+8      	; 0x340 <send_instruction+0x26>
 338:	6c 2f       	mov	r22, r28
 33a:	c7 01       	movw	r24, r14
 33c:	67 d2       	rcall	.+1230   	; 0x80c <SPI_Write_Block>
 33e:	04 c0       	rjmp	.+8      	; 0x348 <send_instruction+0x2e>
 340:	4c 2f       	mov	r20, r28
 342:	b8 01       	movw	r22, r16
 344:	c7 01       	movw	r24, r14
 346:	4b d2       	rcall	.+1174   	; 0x7de <SPI_ReadWrite_Block>
 348:	2d 9a       	sbi	0x05, 5	; 5
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <_set_rx_mode>:
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	1f 92       	push	r1
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	be 01       	movw	r22, r28
 364:	6f 5f       	subi	r22, 0xFF	; 255
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	b2 df       	rcall	.-156    	; 0x2d0 <_get_register>
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	80 fd       	sbrc	r24, 0
 370:	10 c0       	rjmp	.+32     	; 0x392 <_set_rx_mode+0x3c>
 372:	81 60       	ori	r24, 0x01	; 1
 374:	89 83       	std	Y+1, r24	; 0x01
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	be 01       	movw	r22, r28
 37a:	6f 5f       	subi	r22, 0xFF	; 255
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	92 df       	rcall	.-220    	; 0x2a6 <_set_register>
 382:	85 e1       	ldi	r24, 0x15	; 21
 384:	8a 95       	dec	r24
 386:	f1 f7       	brne	.-4      	; 0x384 <_set_rx_mode+0x2e>
 388:	00 c0       	rjmp	.+0      	; 0x38a <_set_rx_mode+0x34>
 38a:	85 e1       	ldi	r24, 0x15	; 21
 38c:	8a 95       	dec	r24
 38e:	f1 f7       	brne	.-4      	; 0x38c <_set_rx_mode+0x36>
 390:	00 c0       	rjmp	.+0      	; 0x392 <_set_rx_mode+0x3c>
 392:	0f 90       	pop	r0
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <_set_tx_mode>:
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	1f 92       	push	r1
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	be 01       	movw	r22, r28
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 df       	rcall	.-224    	; 0x2d0 <_get_register>
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	80 ff       	sbrs	r24, 0
 3b4:	10 c0       	rjmp	.+32     	; 0x3d6 <_set_tx_mode+0x3c>
 3b6:	8e 7f       	andi	r24, 0xFE	; 254
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	be 01       	movw	r22, r28
 3be:	6f 5f       	subi	r22, 0xFF	; 255
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	70 df       	rcall	.-288    	; 0x2a6 <_set_register>
 3c6:	85 e1       	ldi	r24, 0x15	; 21
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <_set_tx_mode+0x2e>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_set_tx_mode+0x34>
 3ce:	85 e1       	ldi	r24, 0x15	; 21
 3d0:	8a 95       	dec	r24
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <_set_tx_mode+0x36>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <_set_tx_mode+0x3c>
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <_reset_pipe0_address>:
 3de:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <rx_pipe_widths>
 3e2:	88 23       	and	r24, r24
 3e4:	29 f0       	breq	.+10     	; 0x3f0 <_reset_pipe0_address+0x12>
 3e6:	45 e0       	ldi	r20, 0x05	; 5
 3e8:	68 e0       	ldi	r22, 0x08	; 8
 3ea:	72 e0       	ldi	r23, 0x02	; 2
 3ec:	8a e0       	ldi	r24, 0x0A	; 10
 3ee:	5b cf       	rjmp	.-330    	; 0x2a6 <_set_register>
 3f0:	08 95       	ret

000003f2 <_config>:
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	1f 92       	push	r1
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	e8 d1       	rcall	.+976    	; 0x7ce <SPI_Init>
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	89 83       	std	Y+1, r24	; 0x01
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	be 01       	movw	r22, r28
 406:	6f 5f       	subi	r22, 0xFF	; 255
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	4d df       	rcall	.-358    	; 0x2a6 <_set_register>
 40c:	85 e1       	ldi	r24, 0x15	; 21
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	be 01       	movw	r22, r28
 414:	6f 5f       	subi	r22, 0xFF	; 255
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	45 df       	rcall	.-374    	; 0x2a6 <_set_register>
 41c:	80 e7       	ldi	r24, 0x70	; 112
 41e:	89 83       	std	Y+1, r24	; 0x01
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	be 01       	movw	r22, r28
 424:	6f 5f       	subi	r22, 0xFF	; 255
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	85 e0       	ldi	r24, 0x05	; 5
 42a:	3d df       	rcall	.-390    	; 0x2a6 <_set_register>
 42c:	89 e0       	ldi	r24, 0x09	; 9
 42e:	89 83       	std	Y+1, r24	; 0x01
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	be 01       	movw	r22, r28
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	86 e0       	ldi	r24, 0x06	; 6
 43a:	35 df       	rcall	.-406    	; 0x2a6 <_set_register>
 43c:	8f e0       	ldi	r24, 0x0F	; 15
 43e:	89 83       	std	Y+1, r24	; 0x01
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	be 01       	movw	r22, r28
 444:	6f 5f       	subi	r22, 0xFF	; 255
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	2d df       	rcall	.-422    	; 0x2a6 <_set_register>
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	81 ee       	ldi	r24, 0xE1	; 225
 458:	60 df       	rcall	.-320    	; 0x31a <send_instruction>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	82 ee       	ldi	r24, 0xE2	; 226
 466:	59 df       	rcall	.-334    	; 0x31a <send_instruction>
 468:	0f 90       	pop	r0
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <Radio_Init>:
 470:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <transmit_lock>
 474:	2c 98       	cbi	0x05, 4	; 5
 476:	24 9a       	sbi	0x04, 4	; 4
 478:	25 9a       	sbi	0x04, 5	; 4
 47a:	68 98       	cbi	0x0d, 0	; 13
 47c:	ea e6       	ldi	r30, 0x6A	; 106
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
 486:	80 81       	ld	r24, Z
 488:	8e 7f       	andi	r24, 0xFE	; 254
 48a:	80 83       	st	Z, r24
 48c:	e8 9a       	sbi	0x1d, 0	; 29
 48e:	b1 df       	rcall	.-158    	; 0x3f2 <_config>
 490:	83 ef       	ldi	r24, 0xF3	; 243
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <Radio_Init+0x24>
 498:	00 c0       	rjmp	.+0      	; 0x49a <Radio_Init+0x2a>
 49a:	00 00       	nop
 49c:	2c 9a       	sbi	0x05, 4	; 5
 49e:	08 95       	ret

000004a0 <Radio_Configure_Rx>:
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	1f 92       	push	r1
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	86 30       	cpi	r24, 0x06	; 6
 4b8:	08 f0       	brcs	.+2      	; 0x4bc <Radio_Configure_Rx+0x1c>
 4ba:	77 c0       	rjmp	.+238    	; 0x5aa <Radio_Configure_Rx+0x10a>
 4bc:	81 11       	cpse	r24, r1
 4be:	16 c0       	rjmp	.+44     	; 0x4ec <Radio_Configure_Rx+0x4c>
 4c0:	db 01       	movw	r26, r22
 4c2:	9c 91       	ld	r25, X
 4c4:	e8 e0       	ldi	r30, 0x08	; 8
 4c6:	f2 e0       	ldi	r31, 0x02	; 2
 4c8:	90 83       	st	Z, r25
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	9c 91       	ld	r25, X
 4ce:	11 97       	sbiw	r26, 0x01	; 1
 4d0:	91 83       	std	Z+1, r25	; 0x01
 4d2:	12 96       	adiw	r26, 0x02	; 2
 4d4:	9c 91       	ld	r25, X
 4d6:	12 97       	sbiw	r26, 0x02	; 2
 4d8:	92 83       	std	Z+2, r25	; 0x02
 4da:	13 96       	adiw	r26, 0x03	; 3
 4dc:	9c 91       	ld	r25, X
 4de:	13 97       	sbiw	r26, 0x03	; 3
 4e0:	93 83       	std	Z+3, r25	; 0x03
 4e2:	14 96       	adiw	r26, 0x04	; 4
 4e4:	9c 91       	ld	r25, X
 4e6:	94 83       	std	Z+4, r25	; 0x04
 4e8:	95 e0       	ldi	r25, 0x05	; 5
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <Radio_Configure_Rx+0x56>
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	10 f4       	brcc	.+4      	; 0x4f4 <Radio_Configure_Rx+0x54>
 4f0:	95 e0       	ldi	r25, 0x05	; 5
 4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <Radio_Configure_Rx+0x56>
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	04 2f       	mov	r16, r20
 4f8:	18 2f       	mov	r17, r24
 4fa:	49 2f       	mov	r20, r25
 4fc:	8a e0       	ldi	r24, 0x0A	; 10
 4fe:	81 0f       	add	r24, r17
 500:	d2 de       	rcall	.-604    	; 0x2a6 <_set_register>
 502:	41 e0       	ldi	r20, 0x01	; 1
 504:	be 01       	movw	r22, r28
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	e1 de       	rcall	.-574    	; 0x2d0 <_get_register>
 50e:	c1 2e       	mov	r12, r17
 510:	d1 2c       	mov	r13, r1
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	7c 01       	movw	r14, r24
 518:	01 2e       	mov	r0, r17
 51a:	02 c0       	rjmp	.+4      	; 0x520 <Radio_Configure_Rx+0x80>
 51c:	ee 0c       	add	r14, r14
 51e:	ff 1c       	adc	r15, r15
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <Radio_Configure_Rx+0x7c>
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	8e 29       	or	r24, r14
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	be 01       	movw	r22, r28
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	b8 de       	rcall	.-656    	; 0x2a6 <_set_register>
 536:	01 11       	cpse	r16, r1
 538:	08 c0       	rjmp	.+16     	; 0x54a <Radio_Configure_Rx+0xaa>
 53a:	1f c0       	rjmp	.+62     	; 0x57a <Radio_Configure_Rx+0xda>
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	be 01       	movw	r22, r28
 540:	6f 5f       	subi	r22, 0xFF	; 255
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	af de       	rcall	.-674    	; 0x2a6 <_set_register>
 548:	30 c0       	rjmp	.+96     	; 0x5aa <Radio_Configure_Rx+0x10a>
 54a:	80 e2       	ldi	r24, 0x20	; 32
 54c:	89 83       	std	Y+1, r24	; 0x01
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	be 01       	movw	r22, r28
 552:	6f 5f       	subi	r22, 0xFF	; 255
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	81 e1       	ldi	r24, 0x11	; 17
 558:	81 0f       	add	r24, r17
 55a:	a5 de       	rcall	.-694    	; 0x2a6 <_set_register>
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	f6 01       	movw	r30, r12
 560:	ee 5e       	subi	r30, 0xEE	; 238
 562:	fd 4f       	sbci	r31, 0xFD	; 253
 564:	80 83       	st	Z, r24
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	be 01       	movw	r22, r28
 56a:	6f 5f       	subi	r22, 0xFF	; 255
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	af de       	rcall	.-674    	; 0x2d0 <_get_register>
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	e8 2a       	or	r14, r24
 576:	e9 82       	std	Y+1, r14	; 0x01
 578:	e1 cf       	rjmp	.-62     	; 0x53c <Radio_Configure_Rx+0x9c>
 57a:	19 82       	std	Y+1, r1	; 0x01
 57c:	41 e0       	ldi	r20, 0x01	; 1
 57e:	be 01       	movw	r22, r28
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	81 e1       	ldi	r24, 0x11	; 17
 586:	81 0f       	add	r24, r17
 588:	8e de       	rcall	.-740    	; 0x2a6 <_set_register>
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	f6 01       	movw	r30, r12
 58e:	ee 5e       	subi	r30, 0xEE	; 238
 590:	fd 4f       	sbci	r31, 0xFD	; 253
 592:	80 83       	st	Z, r24
 594:	41 e0       	ldi	r20, 0x01	; 1
 596:	be 01       	movw	r22, r28
 598:	6f 5f       	subi	r22, 0xFF	; 255
 59a:	7f 4f       	sbci	r23, 0xFF	; 255
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	98 de       	rcall	.-720    	; 0x2d0 <_get_register>
 5a0:	e0 94       	com	r14
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	e8 22       	and	r14, r24
 5a6:	e9 82       	std	Y+1, r14	; 0x01
 5a8:	c9 cf       	rjmp	.-110    	; 0x53c <Radio_Configure_Rx+0x9c>
 5aa:	0f 90       	pop	r0
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	df 90       	pop	r13
 5ba:	cf 90       	pop	r12
 5bc:	08 95       	ret

000005be <Radio_Set_Tx_Addr>:
 5be:	fc 01       	movw	r30, r24
 5c0:	80 81       	ld	r24, Z
 5c2:	ad e0       	ldi	r26, 0x0D	; 13
 5c4:	b2 e0       	ldi	r27, 0x02	; 2
 5c6:	8c 93       	st	X, r24
 5c8:	81 81       	ldd	r24, Z+1	; 0x01
 5ca:	11 96       	adiw	r26, 0x01	; 1
 5cc:	8c 93       	st	X, r24
 5ce:	11 97       	sbiw	r26, 0x01	; 1
 5d0:	82 81       	ldd	r24, Z+2	; 0x02
 5d2:	12 96       	adiw	r26, 0x02	; 2
 5d4:	8c 93       	st	X, r24
 5d6:	12 97       	sbiw	r26, 0x02	; 2
 5d8:	83 81       	ldd	r24, Z+3	; 0x03
 5da:	13 96       	adiw	r26, 0x03	; 3
 5dc:	8c 93       	st	X, r24
 5de:	13 97       	sbiw	r26, 0x03	; 3
 5e0:	84 81       	ldd	r24, Z+4	; 0x04
 5e2:	14 96       	adiw	r26, 0x04	; 4
 5e4:	8c 93       	st	X, r24
 5e6:	45 e0       	ldi	r20, 0x05	; 5
 5e8:	bf 01       	movw	r22, r30
 5ea:	80 e1       	ldi	r24, 0x10	; 16
 5ec:	5c ce       	rjmp	.-840    	; 0x2a6 <_set_register>
 5ee:	08 95       	ret

000005f0 <Radio_Configure>:
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	1f 92       	push	r1
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	64 30       	cpi	r22, 0x04	; 4
 600:	e0 f4       	brcc	.+56     	; 0x63a <Radio_Configure+0x4a>
 602:	82 30       	cpi	r24, 0x02	; 2
 604:	d0 f4       	brcc	.+52     	; 0x63a <Radio_Configure+0x4a>
 606:	16 2f       	mov	r17, r22
 608:	08 2f       	mov	r16, r24
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	be 01       	movw	r22, r28
 60e:	6f 5f       	subi	r22, 0xFF	; 255
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	86 e0       	ldi	r24, 0x06	; 6
 614:	5d de       	rcall	.-838    	; 0x2d0 <_get_register>
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	86 60       	ori	r24, 0x06	; 6
 61a:	61 2f       	mov	r22, r17
 61c:	66 0f       	add	r22, r22
 61e:	68 23       	and	r22, r24
 620:	00 23       	and	r16, r16
 622:	19 f0       	breq	.+6      	; 0x62a <Radio_Configure+0x3a>
 624:	68 60       	ori	r22, 0x08	; 8
 626:	69 83       	std	Y+1, r22	; 0x01
 628:	02 c0       	rjmp	.+4      	; 0x62e <Radio_Configure+0x3e>
 62a:	67 7f       	andi	r22, 0xF7	; 247
 62c:	69 83       	std	Y+1, r22	; 0x01
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	be 01       	movw	r22, r28
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	86 e0       	ldi	r24, 0x06	; 6
 638:	36 de       	rcall	.-916    	; 0x2a6 <_set_register>
 63a:	0f 90       	pop	r0
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	08 95       	ret

00000646 <Radio_Transmit>:
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	8c 01       	movw	r16, r24
 64e:	c6 2f       	mov	r28, r22
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <transmit_lock>
 656:	2c 98       	cbi	0x05, 4	; 5
 658:	a0 de       	rcall	.-704    	; 0x39a <_set_tx_mode>
 65a:	45 e0       	ldi	r20, 0x05	; 5
 65c:	6d e0       	ldi	r22, 0x0D	; 13
 65e:	72 e0       	ldi	r23, 0x02	; 2
 660:	8a e0       	ldi	r24, 0x0A	; 10
 662:	21 de       	rcall	.-958    	; 0x2a6 <_set_register>
 664:	2d 98       	cbi	0x05, 5	; 5
 666:	80 ea       	ldi	r24, 0xA0	; 160
 668:	e4 d0       	rcall	.+456    	; 0x832 <SPI_Write_Byte>
 66a:	60 e2       	ldi	r22, 0x20	; 32
 66c:	c8 01       	movw	r24, r16
 66e:	ce d0       	rcall	.+412    	; 0x80c <SPI_Write_Block>
 670:	2d 9a       	sbi	0x05, 5	; 5
 672:	2c 9a       	sbi	0x05, 4	; 5
 674:	c1 11       	cpse	r28, r1
 676:	07 c0       	rjmp	.+14     	; 0x686 <Radio_Transmit+0x40>
 678:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <transmit_lock>
 67c:	81 11       	cpse	r24, r1
 67e:	fc cf       	rjmp	.-8      	; 0x678 <Radio_Transmit+0x32>
 680:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <tx_last_status>
 684:	01 c0       	rjmp	.+2      	; 0x688 <Radio_Transmit+0x42>
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	08 95       	ret

00000690 <Radio_Receive>:
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	ec 01       	movw	r28, r24
 696:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <transmit_lock>
 69a:	2c 98       	cbi	0x05, 4	; 5
 69c:	ff dd       	rcall	.-1026   	; 0x29c <_get_status>
 69e:	8e 70       	andi	r24, 0x0E	; 14
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	95 95       	asr	r25
 6a4:	87 95       	ror	r24
 6a6:	9c 01       	movw	r18, r24
 6a8:	33 27       	eor	r19, r19
 6aa:	f9 01       	movw	r30, r18
 6ac:	ee 5e       	subi	r30, 0xEE	; 238
 6ae:	fd 4f       	sbci	r31, 0xFD	; 253
 6b0:	40 81       	ld	r20, Z
 6b2:	41 32       	cpi	r20, 0x21	; 33
 6b4:	80 f4       	brcc	.+32     	; 0x6d6 <Radio_Receive+0x46>
 6b6:	87 30       	cpi	r24, 0x07	; 7
 6b8:	81 f0       	breq	.+32     	; 0x6da <Radio_Receive+0x4a>
 6ba:	f9 01       	movw	r30, r18
 6bc:	ee 5e       	subi	r30, 0xEE	; 238
 6be:	fd 4f       	sbci	r31, 0xFD	; 253
 6c0:	20 81       	ld	r18, Z
 6c2:	ae 01       	movw	r20, r28
 6c4:	be 01       	movw	r22, r28
 6c6:	81 e6       	ldi	r24, 0x61	; 97
 6c8:	28 de       	rcall	.-944    	; 0x31a <send_instruction>
 6ca:	e8 dd       	rcall	.-1072   	; 0x29c <_get_status>
 6cc:	8e 70       	andi	r24, 0x0E	; 14
 6ce:	8e 30       	cpi	r24, 0x0E	; 14
 6d0:	31 f4       	brne	.+12     	; 0x6de <Radio_Receive+0x4e>
 6d2:	84 e0       	ldi	r24, 0x04	; 4
 6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <Radio_Receive+0x50>
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <Radio_Receive+0x50>
 6da:	82 e0       	ldi	r24, 0x02	; 2
 6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <Radio_Receive+0x50>
 6de:	83 e0       	ldi	r24, 0x03	; 3
 6e0:	2c 9a       	sbi	0x05, 4	; 5
 6e2:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <transmit_lock>
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <__vector_1>:

// Interrupt handler
ISR(INT0_vect)
{
 6ec:	1f 92       	push	r1
 6ee:	0f 92       	push	r0
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	0f 92       	push	r0
 6f4:	11 24       	eor	r1, r1
 6f6:	0b b6       	in	r0, 0x3b	; 59
 6f8:	0f 92       	push	r0
 6fa:	2f 93       	push	r18
 6fc:	3f 93       	push	r19
 6fe:	4f 93       	push	r20
 700:	5f 93       	push	r21
 702:	6f 93       	push	r22
 704:	7f 93       	push	r23
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	af 93       	push	r26
 70c:	bf 93       	push	r27
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	1f 92       	push	r1
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
 71c:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
 71e:	be dd       	rcall	.-1156   	; 0x29c <_get_status>
 720:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
 722:	86 ff       	sbrs	r24, 6
 724:	03 c0       	rjmp	.+6      	; 0x72c <__vector_1+0x40>
        pipe_number =  (status & 0xE) >> 1;
        radio_rxhandler(pipe_number);
 726:	8e 70       	andi	r24, 0x0E	; 14
 728:	86 95       	lsr	r24
 72a:	a6 dd       	rcall	.-1204   	; 0x278 <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	85 ff       	sbrs	r24, 5
 730:	1b c0       	rjmp	.+54     	; 0x768 <__vector_1+0x7c>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
 732:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <transmit_lock>
        _reset_pipe0_address();
 736:	53 de       	rcall	.-858    	; 0x3de <_reset_pipe0_address>
        _set_rx_mode();
 738:	0e de       	rcall	.-996    	; 0x356 <_set_rx_mode>
 73a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <tx_history>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
 73e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <tx_history+0x1>
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <tx_history+0x1>
 74a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <tx_history>
 74e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <tx_history>
        tx_history |= 1;
 752:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <tx_history+0x1>
 756:	81 60       	ori	r24, 0x01	; 1
 758:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <tx_history+0x1>
 75c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <tx_history>
 760:	81 e0       	ldi	r24, 0x01	; 1
        tx_last_status = RADIO_TX_SUCCESS;
 762:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <tx_last_status>
 766:	14 c0       	rjmp	.+40     	; 0x790 <__vector_1+0xa4>
    } else if (status & _BV(MAX_RT)) {
 768:	84 ff       	sbrs	r24, 4
 76a:	12 c0       	rjmp	.+36     	; 0x790 <__vector_1+0xa4>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
 76c:	81 ee       	ldi	r24, 0xE1	; 225

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
 76e:	61 d0       	rcall	.+194    	; 0x832 <SPI_Write_Byte>
 770:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <transmit_lock>
        _reset_pipe0_address();
 774:	34 de       	rcall	.-920    	; 0x3de <_reset_pipe0_address>
        _set_rx_mode();
 776:	ef dd       	rcall	.-1058   	; 0x356 <_set_rx_mode>
 778:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <tx_history>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
 77c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <tx_history+0x1>
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <tx_history+0x1>
 788:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <tx_history>
 78c:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <tx_last_status>
        tx_last_status = RADIO_TX_MAX_RT;
 790:	80 e7       	ldi	r24, 0x70	; 112
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
 792:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
 794:	41 e0       	ldi	r20, 0x01	; 1
 796:	be 01       	movw	r22, r28
 798:	6f 5f       	subi	r22, 0xFF	; 255
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	87 e0       	ldi	r24, 0x07	; 7
 79e:	83 dd       	rcall	.-1274   	; 0x2a6 <_set_register>
 7a0:	2c 9a       	sbi	0x05, 4	; 5

    RADIO_CE_HIGH();
 7a2:	0f 90       	pop	r0
}
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	ff 91       	pop	r31
 7aa:	ef 91       	pop	r30
 7ac:	bf 91       	pop	r27
 7ae:	af 91       	pop	r26
 7b0:	9f 91       	pop	r25
 7b2:	8f 91       	pop	r24
 7b4:	7f 91       	pop	r23
 7b6:	6f 91       	pop	r22
 7b8:	5f 91       	pop	r21
 7ba:	4f 91       	pop	r20
 7bc:	3f 91       	pop	r19
 7be:	2f 91       	pop	r18
 7c0:	0f 90       	pop	r0
 7c2:	0b be       	out	0x3b, r0	; 59
 7c4:	0f 90       	pop	r0
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	0f 90       	pop	r0
 7ca:	1f 90       	pop	r1
 7cc:	18 95       	reti

000007ce <SPI_Init>:
#define SPI_WAIT()              while (!(SPSR & _BV(SPIF)));

void SPI_Init()
{
	// set MOSI, SCK, and SS output, MISO input
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | ~(_BV(SPI_MISO));
 7ce:	84 b1       	in	r24, 0x04	; 4
 7d0:	87 6f       	ori	r24, 0xF7	; 247
 7d2:	84 b9       	out	0x04, r24	; 4

	SPI_PORT |= _BV(SPI_SS);
 7d4:	28 9a       	sbi	0x05, 0	; 5

	SPCR |= _BV(SPE) | _BV(MSTR);
 7d6:	8c b5       	in	r24, 0x2c	; 44
 7d8:	80 65       	ori	r24, 0x50	; 80
 7da:	8c bd       	out	0x2c, r24	; 44
 7dc:	08 95       	ret

000007de <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
 7de:	44 23       	and	r20, r20
 7e0:	a1 f0       	breq	.+40     	; 0x80a <SPI_ReadWrite_Block+0x2c>
 7e2:	fc 01       	movw	r30, r24
 7e4:	a6 2f       	mov	r26, r22
 7e6:	b7 2f       	mov	r27, r23
 7e8:	41 50       	subi	r20, 0x01	; 1
 7ea:	24 2f       	mov	r18, r20
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	2f 5f       	subi	r18, 0xFF	; 255
 7f0:	3f 4f       	sbci	r19, 0xFF	; 255
 7f2:	28 0f       	add	r18, r24
 7f4:	39 1f       	adc	r19, r25
          SPDR = data[i];
 7f6:	91 91       	ld	r25, Z+
 7f8:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
 7fa:	0d b4       	in	r0, 0x2d	; 45
 7fc:	07 fe       	sbrs	r0, 7
 7fe:	fd cf       	rjmp	.-6      	; 0x7fa <SPI_ReadWrite_Block+0x1c>
          buffer[i] = SPDR;
 800:	9e b5       	in	r25, 0x2e	; 46
 802:	9d 93       	st	X+, r25
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
 804:	e2 17       	cp	r30, r18
 806:	f3 07       	cpc	r31, r19
 808:	b1 f7       	brne	.-20     	; 0x7f6 <SPI_ReadWrite_Block+0x18>
 80a:	08 95       	ret

0000080c <SPI_Write_Block>:
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
 80c:	66 23       	and	r22, r22
 80e:	81 f0       	breq	.+32     	; 0x830 <SPI_Write_Block+0x24>
 810:	fc 01       	movw	r30, r24
 812:	61 50       	subi	r22, 0x01	; 1
 814:	26 2f       	mov	r18, r22
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	2f 5f       	subi	r18, 0xFF	; 255
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	28 0f       	add	r18, r24
 81e:	39 1f       	adc	r19, r25
          SPDR = data[i];
 820:	91 91       	ld	r25, Z+
 822:	9e bd       	out	0x2e, r25	; 46
          SPI_WAIT();
 824:	0d b4       	in	r0, 0x2d	; 45
 826:	07 fe       	sbrs	r0, 7
 828:	fd cf       	rjmp	.-6      	; 0x824 <SPI_Write_Block+0x18>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
 82a:	e2 17       	cp	r30, r18
 82c:	f3 07       	cpc	r31, r19
 82e:	c1 f7       	brne	.-16     	; 0x820 <SPI_Write_Block+0x14>
 830:	08 95       	ret

00000832 <SPI_Write_Byte>:
    }
}

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
 832:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
 834:	0d b4       	in	r0, 0x2d	; 45
 836:	07 fe       	sbrs	r0, 7
 838:	fd cf       	rjmp	.-6      	; 0x834 <SPI_Write_Byte+0x2>
    return SPDR;
 83a:	8e b5       	in	r24, 0x2e	; 46
}
 83c:	08 95       	ret

0000083e <Roomba_Init>:
		return;
	}

	state = newState;
	_delay_ms(20);
}
 83e:	ea e0       	ldi	r30, 0x0A	; 10
 840:	f1 e0       	ldi	r31, 0x01	; 1
 842:	80 81       	ld	r24, Z
 844:	80 68       	ori	r24, 0x80	; 128
 846:	80 83       	st	Z, r24
 848:	eb e0       	ldi	r30, 0x0B	; 11
 84a:	f1 e0       	ldi	r31, 0x01	; 1
 84c:	80 81       	ld	r24, Z
 84e:	8f 77       	andi	r24, 0x7F	; 127
 850:	80 83       	st	Z, r24
 852:	2f e9       	ldi	r18, 0x9F	; 159
 854:	86 e8       	ldi	r24, 0x86	; 134
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	21 50       	subi	r18, 0x01	; 1
 85a:	80 40       	sbci	r24, 0x00	; 0
 85c:	90 40       	sbci	r25, 0x00	; 0
 85e:	e1 f7       	brne	.-8      	; 0x858 <Roomba_Init+0x1a>
 860:	00 c0       	rjmp	.+0      	; 0x862 <Roomba_Init+0x24>
 862:	00 00       	nop
 864:	80 81       	ld	r24, Z
 866:	80 68       	ori	r24, 0x80	; 128
 868:	80 83       	st	Z, r24
 86a:	af e7       	ldi	r26, 0x7F	; 127
 86c:	ba e1       	ldi	r27, 0x1A	; 26
 86e:	26 e0       	ldi	r18, 0x06	; 6
 870:	a1 50       	subi	r26, 0x01	; 1
 872:	b0 40       	sbci	r27, 0x00	; 0
 874:	20 40       	sbci	r18, 0x00	; 0
 876:	e1 f7       	brne	.-8      	; 0x870 <Roomba_Init+0x32>
 878:	00 c0       	rjmp	.+0      	; 0x87a <Roomba_Init+0x3c>
 87a:	00 00       	nop
 87c:	93 e0       	ldi	r25, 0x03	; 3
 87e:	80 81       	ld	r24, Z
 880:	8f 77       	andi	r24, 0x7F	; 127
 882:	80 83       	st	Z, r24
 884:	a3 ed       	ldi	r26, 0xD3	; 211
 886:	b0 e3       	ldi	r27, 0x30	; 48
 888:	11 97       	sbiw	r26, 0x01	; 1
 88a:	f1 f7       	brne	.-4      	; 0x888 <Roomba_Init+0x4a>
 88c:	00 c0       	rjmp	.+0      	; 0x88e <Roomba_Init+0x50>
 88e:	00 00       	nop
 890:	80 81       	ld	r24, Z
 892:	80 68       	ori	r24, 0x80	; 128
 894:	80 83       	st	Z, r24
 896:	a3 ed       	ldi	r26, 0xD3	; 211
 898:	b0 e3       	ldi	r27, 0x30	; 48
 89a:	11 97       	sbiw	r26, 0x01	; 1
 89c:	f1 f7       	brne	.-4      	; 0x89a <Roomba_Init+0x5c>
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <Roomba_Init+0x62>
 8a0:	00 00       	nop
 8a2:	91 50       	subi	r25, 0x01	; 1
 8a4:	61 f7       	brne	.-40     	; 0x87e <Roomba_Init+0x40>
 8a6:	82 e0       	ldi	r24, 0x02	; 2
 8a8:	d1 d0       	rcall	.+418    	; 0xa4c <uart_init>
 8aa:	80 e8       	ldi	r24, 0x80	; 128
 8ac:	bb d0       	rcall	.+374    	; 0xa24 <uart_putchar>
 8ae:	87 e8       	ldi	r24, 0x87	; 135
 8b0:	93 e1       	ldi	r25, 0x13	; 19
 8b2:	01 97       	sbiw	r24, 0x01	; 1
 8b4:	f1 f7       	brne	.-4      	; 0x8b2 <Roomba_Init+0x74>
 8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <Roomba_Init+0x7a>
 8b8:	00 00       	nop
 8ba:	81 e8       	ldi	r24, 0x81	; 129
 8bc:	b3 d0       	rcall	.+358    	; 0xa24 <uart_putchar>
 8be:	89 e0       	ldi	r24, 0x09	; 9
 8c0:	b1 d0       	rcall	.+354    	; 0xa24 <uart_putchar>
 8c2:	a7 ea       	ldi	r26, 0xA7	; 167
 8c4:	b1 e6       	ldi	r27, 0x61	; 97
 8c6:	11 97       	sbiw	r26, 0x01	; 1
 8c8:	f1 f7       	brne	.-4      	; 0x8c6 <Roomba_Init+0x88>
 8ca:	00 c0       	rjmp	.+0      	; 0x8cc <Roomba_Init+0x8e>
 8cc:	00 00       	nop
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	bd d0       	rcall	.+378    	; 0xa4c <uart_init>
 8d2:	82 e8       	ldi	r24, 0x82	; 130
 8d4:	a7 d0       	rcall	.+334    	; 0xa24 <uart_putchar>
 8d6:	87 e8       	ldi	r24, 0x87	; 135
 8d8:	93 e1       	ldi	r25, 0x13	; 19
 8da:	01 97       	sbiw	r24, 0x01	; 1
 8dc:	f1 f7       	brne	.-4      	; 0x8da <Roomba_Init+0x9c>
 8de:	00 c0       	rjmp	.+0      	; 0x8e0 <Roomba_Init+0xa2>
 8e0:	00 00       	nop
 8e2:	08 95       	ret

000008e4 <Roomba_UpdateSensorPacket>:
 8e4:	1f 93       	push	r17
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	18 2f       	mov	r17, r24
 8ec:	eb 01       	movw	r28, r22
 8ee:	8e e8       	ldi	r24, 0x8E	; 142
 8f0:	99 d0       	rcall	.+306    	; 0xa24 <uart_putchar>
 8f2:	81 2f       	mov	r24, r17
 8f4:	97 d0       	rcall	.+302    	; 0xa24 <uart_putchar>
 8f6:	12 30       	cpi	r17, 0x02	; 2
 8f8:	91 f1       	breq	.+100    	; 0x95e <Roomba_UpdateSensorPacket+0x7a>
 8fa:	13 30       	cpi	r17, 0x03	; 3
 8fc:	09 f4       	brne	.+2      	; 0x900 <Roomba_UpdateSensorPacket+0x1c>
 8fe:	4b c0       	rjmp	.+150    	; 0x996 <Roomba_UpdateSensorPacket+0xb2>
 900:	11 30       	cpi	r17, 0x01	; 1
 902:	09 f0       	breq	.+2      	; 0x906 <Roomba_UpdateSensorPacket+0x22>
 904:	73 c0       	rjmp	.+230    	; 0x9ec <Roomba_UpdateSensorPacket+0x108>
 906:	df d0       	rcall	.+446    	; 0xac6 <uart_bytes_received>
 908:	8a 30       	cpi	r24, 0x0A	; 10
 90a:	e9 f7       	brne	.-6      	; 0x906 <Roomba_UpdateSensorPacket+0x22>
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	93 d0       	rcall	.+294    	; 0xa38 <uart_get_byte>
 912:	88 83       	st	Y, r24
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	8f d0       	rcall	.+286    	; 0xa38 <uart_get_byte>
 91a:	89 83       	std	Y+1, r24	; 0x01
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	8b d0       	rcall	.+278    	; 0xa38 <uart_get_byte>
 922:	8a 83       	std	Y+2, r24	; 0x02
 924:	83 e0       	ldi	r24, 0x03	; 3
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	87 d0       	rcall	.+270    	; 0xa38 <uart_get_byte>
 92a:	8b 83       	std	Y+3, r24	; 0x03
 92c:	84 e0       	ldi	r24, 0x04	; 4
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	83 d0       	rcall	.+262    	; 0xa38 <uart_get_byte>
 932:	8c 83       	std	Y+4, r24	; 0x04
 934:	85 e0       	ldi	r24, 0x05	; 5
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	7f d0       	rcall	.+254    	; 0xa38 <uart_get_byte>
 93a:	8d 83       	std	Y+5, r24	; 0x05
 93c:	86 e0       	ldi	r24, 0x06	; 6
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	7b d0       	rcall	.+246    	; 0xa38 <uart_get_byte>
 942:	8e 83       	std	Y+6, r24	; 0x06
 944:	87 e0       	ldi	r24, 0x07	; 7
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	77 d0       	rcall	.+238    	; 0xa38 <uart_get_byte>
 94a:	8f 83       	std	Y+7, r24	; 0x07
 94c:	88 e0       	ldi	r24, 0x08	; 8
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	73 d0       	rcall	.+230    	; 0xa38 <uart_get_byte>
 952:	88 87       	std	Y+8, r24	; 0x08
 954:	89 e0       	ldi	r24, 0x09	; 9
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	6f d0       	rcall	.+222    	; 0xa38 <uart_get_byte>
 95a:	89 87       	std	Y+9, r24	; 0x09
 95c:	47 c0       	rjmp	.+142    	; 0x9ec <Roomba_UpdateSensorPacket+0x108>
 95e:	b3 d0       	rcall	.+358    	; 0xac6 <uart_bytes_received>
 960:	86 30       	cpi	r24, 0x06	; 6
 962:	e9 f7       	brne	.-6      	; 0x95e <Roomba_UpdateSensorPacket+0x7a>
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	67 d0       	rcall	.+206    	; 0xa38 <uart_get_byte>
 96a:	8a 87       	std	Y+10, r24	; 0x0a
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	63 d0       	rcall	.+198    	; 0xa38 <uart_get_byte>
 972:	8b 87       	std	Y+11, r24	; 0x0b
 974:	82 e0       	ldi	r24, 0x02	; 2
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	5f d0       	rcall	.+190    	; 0xa38 <uart_get_byte>
 97a:	8d 87       	std	Y+13, r24	; 0x0d
 97c:	83 e0       	ldi	r24, 0x03	; 3
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	5b d0       	rcall	.+182    	; 0xa38 <uart_get_byte>
 982:	8c 87       	std	Y+12, r24	; 0x0c
 984:	84 e0       	ldi	r24, 0x04	; 4
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	57 d0       	rcall	.+174    	; 0xa38 <uart_get_byte>
 98a:	8f 87       	std	Y+15, r24	; 0x0f
 98c:	85 e0       	ldi	r24, 0x05	; 5
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	53 d0       	rcall	.+166    	; 0xa38 <uart_get_byte>
 992:	8e 87       	std	Y+14, r24	; 0x0e
 994:	2b c0       	rjmp	.+86     	; 0x9ec <Roomba_UpdateSensorPacket+0x108>
 996:	97 d0       	rcall	.+302    	; 0xac6 <uart_bytes_received>
 998:	8a 30       	cpi	r24, 0x0A	; 10
 99a:	e9 f7       	brne	.-6      	; 0x996 <Roomba_UpdateSensorPacket+0xb2>
 99c:	80 e0       	ldi	r24, 0x00	; 0
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	4b d0       	rcall	.+150    	; 0xa38 <uart_get_byte>
 9a2:	88 8b       	std	Y+16, r24	; 0x10
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	47 d0       	rcall	.+142    	; 0xa38 <uart_get_byte>
 9aa:	8a 8b       	std	Y+18, r24	; 0x12
 9ac:	82 e0       	ldi	r24, 0x02	; 2
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	43 d0       	rcall	.+134    	; 0xa38 <uart_get_byte>
 9b2:	89 8b       	std	Y+17, r24	; 0x11
 9b4:	83 e0       	ldi	r24, 0x03	; 3
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	3f d0       	rcall	.+126    	; 0xa38 <uart_get_byte>
 9ba:	8c 8b       	std	Y+20, r24	; 0x14
 9bc:	84 e0       	ldi	r24, 0x04	; 4
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	3b d0       	rcall	.+118    	; 0xa38 <uart_get_byte>
 9c2:	8b 8b       	std	Y+19, r24	; 0x13
 9c4:	85 e0       	ldi	r24, 0x05	; 5
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	37 d0       	rcall	.+110    	; 0xa38 <uart_get_byte>
 9ca:	8d 8b       	std	Y+21, r24	; 0x15
 9cc:	86 e0       	ldi	r24, 0x06	; 6
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	33 d0       	rcall	.+102    	; 0xa38 <uart_get_byte>
 9d2:	8f 8b       	std	Y+23, r24	; 0x17
 9d4:	87 e0       	ldi	r24, 0x07	; 7
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	2f d0       	rcall	.+94     	; 0xa38 <uart_get_byte>
 9da:	8e 8b       	std	Y+22, r24	; 0x16
 9dc:	88 e0       	ldi	r24, 0x08	; 8
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	2b d0       	rcall	.+86     	; 0xa38 <uart_get_byte>
 9e2:	89 8f       	std	Y+25, r24	; 0x19
 9e4:	89 e0       	ldi	r24, 0x09	; 9
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	27 d0       	rcall	.+78     	; 0xa38 <uart_get_byte>
 9ea:	88 8f       	std	Y+24, r24	; 0x18
 9ec:	71 d0       	rcall	.+226    	; 0xad0 <uart_reset_receive>
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	1f 91       	pop	r17
 9f4:	08 95       	ret

000009f6 <Roomba_Drive>:

void Roomba_Drive( int16_t velocity, int16_t radius )
{
 9f6:	0f 93       	push	r16
 9f8:	1f 93       	push	r17
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	18 2f       	mov	r17, r24
 a00:	09 2f       	mov	r16, r25
 a02:	c6 2f       	mov	r28, r22
 a04:	d7 2f       	mov	r29, r23
	uart_putchar(DRIVE);
 a06:	89 e8       	ldi	r24, 0x89	; 137
 a08:	0d d0       	rcall	.+26     	; 0xa24 <uart_putchar>
	uart_putchar(HIGH_BYTE(velocity));
 a0a:	80 2f       	mov	r24, r16
 a0c:	0b d0       	rcall	.+22     	; 0xa24 <uart_putchar>
	uart_putchar(LOW_BYTE(velocity));
 a0e:	81 2f       	mov	r24, r17
 a10:	09 d0       	rcall	.+18     	; 0xa24 <uart_putchar>
	uart_putchar(HIGH_BYTE(radius));
 a12:	8d 2f       	mov	r24, r29
 a14:	07 d0       	rcall	.+14     	; 0xa24 <uart_putchar>
	uart_putchar(LOW_BYTE(radius));
 a16:	8c 2f       	mov	r24, r28
 a18:	05 d0       	rcall	.+10     	; 0xa24 <uart_putchar>
 a1a:	df 91       	pop	r29
}
 a1c:	cf 91       	pop	r28
 a1e:	1f 91       	pop	r17
 a20:	0f 91       	pop	r16
 a22:	08 95       	ret

00000a24 <uart_putchar>:
 a24:	f8 94       	cli

void uart_putstr(char *s)
{
	while(*s) uart_putchar(*s++);
	
}
 a26:	e8 ec       	ldi	r30, 0xC8	; 200
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	90 81       	ld	r25, Z
 a2c:	95 ff       	sbrs	r25, 5
 a2e:	fd cf       	rjmp	.-6      	; 0xa2a <uart_putchar+0x6>
 a30:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 a34:	78 94       	sei
 a36:	08 95       	ret

00000a38 <uart_get_byte>:
 a38:	80 32       	cpi	r24, 0x20	; 32
 a3a:	91 05       	cpc	r25, r1
 a3c:	2c f4       	brge	.+10     	; 0xa48 <uart_get_byte+0x10>
 a3e:	fc 01       	movw	r30, r24
 a40:	e7 5c       	subi	r30, 0xC7	; 199
 a42:	fd 4f       	sbci	r31, 0xFD	; 253
 a44:	80 81       	ld	r24, Z
 a46:	08 95       	ret
 a48:	80 e0       	ldi	r24, 0x00	; 0
 a4a:	08 95       	ret

00000a4c <uart_init>:

	//uint8_t sreg = SREG;
	//cli();
	
	// Make sure I/O clock to USART1 is enabled
	PRR1 &= ~(1 << PRUSART1);
 a4c:	e5 e6       	ldi	r30, 0x65	; 101
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	90 81       	ld	r25, Z
 a52:	9e 7f       	andi	r25, 0xFE	; 254
 a54:	90 83       	st	Z, r25
	
	// Set baud rate to 19.2k at fOSC = 16 MHz
	
	switch(bitrate) {
 a56:	81 30       	cpi	r24, 0x01	; 1
 a58:	a1 f0       	breq	.+40     	; 0xa82 <uart_init+0x36>
 a5a:	60 f0       	brcs	.+24     	; 0xa74 <uart_init+0x28>
 a5c:	82 30       	cpi	r24, 0x02	; 2
 a5e:	19 f0       	breq	.+6      	; 0xa66 <uart_init+0x1a>
 a60:	83 30       	cpi	r24, 0x03	; 3
 a62:	b1 f0       	breq	.+44     	; 0xa90 <uart_init+0x44>
 a64:	1c c0       	rjmp	.+56     	; 0xa9e <uart_init+0x52>
		case UART_19200:
		UBRR1 = 51;
 a66:	83 e3       	ldi	r24, 0x33	; 51
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 a6e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
		break;
 a72:	1b c0       	rjmp	.+54     	; 0xaaa <uart_init+0x5e>
		case UART_38400:
		UBRR1 = 25;
 a74:	89 e1       	ldi	r24, 0x19	; 25
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 a7c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
		break;
 a80:	14 c0       	rjmp	.+40     	; 0xaaa <uart_init+0x5e>
		case UART_57600:
		UBRR1 = 16;
 a82:	80 e1       	ldi	r24, 0x10	; 16
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 a8a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
		break;
 a8e:	0d c0       	rjmp	.+26     	; 0xaaa <uart_init+0x5e>
		case UART_115200:
		UBRR1 = 8;
 a90:	88 e0       	ldi	r24, 0x08	; 8
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 a98:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
		break;
 a9c:	06 c0       	rjmp	.+12     	; 0xaaa <uart_init+0x5e>
		default:
		UBRR1 = 16;
 a9e:	80 e1       	ldi	r24, 0x10	; 16
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 aa6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	}
	
	// Clear USART Transmit complete flag, normal USART transmission speed
	UCSR1A = (1 << TXC1) | (0 << U2X1);
 aaa:	e8 ec       	ldi	r30, 0xC8	; 200
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	80 e4       	ldi	r24, 0x40	; 64
 ab0:	80 83       	st	Z, r24
	
	// Enable receiver, transmitter, and rx complete interrupt.
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
 ab2:	88 e9       	ldi	r24, 0x98	; 152
 ab4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
	// 8-bit data
	UCSR1C = ((1<<UCSZ11)|(1<<UCSZ10));
 ab8:	86 e0       	ldi	r24, 0x06	; 6
 aba:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
	// disable 2x speed
	UCSR1A &= ~(1<<U2X1);
 abe:	80 81       	ld	r24, Z
 ac0:	8d 7f       	andi	r24, 0xFD	; 253
 ac2:	80 83       	st	Z, r24
 ac4:	08 95       	ret

00000ac6 <uart_bytes_received>:
	// SREG = reg
}

uint8_t uart_bytes_received(void)
{
	return rxn;
 ac6:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <rxn>
 aca:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <rxn+0x1>
}
 ace:	08 95       	ret

00000ad0 <uart_reset_receive>:

void uart_reset_receive(void)
{
	rxn = 0;
 ad0:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <rxn+0x1>
 ad4:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <rxn>
 ad8:	08 95       	ret

00000ada <__vector_36>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART1_RX_vect)
{
 ada:	1f 92       	push	r1
 adc:	0f 92       	push	r0
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	0f 92       	push	r0
 ae2:	11 24       	eor	r1, r1
 ae4:	0b b6       	in	r0, 0x3b	; 59
 ae6:	0f 92       	push	r0
 ae8:	8f 93       	push	r24
 aea:	9f 93       	push	r25
 aec:	ef 93       	push	r30
 aee:	ff 93       	push	r31

	//PORTB = ~_BV(PINB1);

	rx[rxn] = UDR1;
 af0:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <rxn>
 af4:	f0 91 5a 02 	lds	r31, 0x025A	; 0x80025a <rxn+0x1>
 af8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 afc:	e7 5c       	subi	r30, 0xC7	; 199
 afe:	fd 4f       	sbci	r31, 0xFD	; 253
 b00:	80 83       	st	Z, r24
	rxn = (rxn + 1) % UART_BUFFER_SIZE;
 b02:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <rxn>
 b06:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <rxn+0x1>
 b0a:	01 96       	adiw	r24, 0x01	; 1
 b0c:	8f 71       	andi	r24, 0x1F	; 31
 b0e:	90 78       	andi	r25, 0x80	; 128
 b10:	99 23       	and	r25, r25
 b12:	24 f4       	brge	.+8      	; 0xb1c <__vector_36+0x42>
 b14:	01 97       	sbiw	r24, 0x01	; 1
 b16:	80 6e       	ori	r24, 0xE0	; 224
 b18:	9f 6f       	ori	r25, 0xFF	; 255
 b1a:	01 96       	adiw	r24, 0x01	; 1
 b1c:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <rxn+0x1>
 b20:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <rxn>
	uart_rx = 1; // notify main of receipt of data.
 b24:	81 e0       	ldi	r24, 0x01	; 1
 b26:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <uart_rx>
	//PORTB = PORTB | _BV(PINB1);
}
 b2a:	ff 91       	pop	r31
 b2c:	ef 91       	pop	r30
 b2e:	9f 91       	pop	r25
 b30:	8f 91       	pop	r24
 b32:	0f 90       	pop	r0
 b34:	0b be       	out	0x3b, r0	; 59
 b36:	0f 90       	pop	r0
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	0f 90       	pop	r0
 b3c:	1f 90       	pop	r1
 b3e:	18 95       	reti

00000b40 <_exit>:
 b40:	f8 94       	cli

00000b42 <__stop_program>:
 b42:	ff cf       	rjmp	.-2      	; 0xb42 <__stop_program>
